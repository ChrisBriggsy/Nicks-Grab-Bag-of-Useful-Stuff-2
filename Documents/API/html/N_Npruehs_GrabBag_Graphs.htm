<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Npruehs.GrabBag.Graphs Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Npruehs.GrabBag.Graphs namespace" /><meta name="Microsoft.Help.F1" content="Npruehs.GrabBag.Graphs" /><meta name="Microsoft.Help.Id" content="N:Npruehs.GrabBag.Graphs" /><meta name="Description" content=" " /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="'true'" /><meta name="container" content="Npruehs.GrabBag.Graphs" /><meta name="file" content="N_Npruehs_GrabBag_Graphs" /><meta name="guid" content="N_Npruehs_GrabBag_Graphs" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">Npruehs.GrabBag.Graphs Namespace</td><td class="OH_tdRunningTitleColumn">Nick's Grab Bag of Useful Stuff 2.0 - Documentation</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="summary"> </div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Classes</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Class</th><th class="ps_descriptionColumn">Description</th></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Npruehs_GrabBag_Graphs_FloatEdge.htm" target="">FloatEdge</a></td><td><div class="summary">
                Edge with a <span class="nolink">Single</span> weight.
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Npruehs_GrabBag_Graphs_Graph_2.htm" target="">Graph<span id="ID0ECABDABAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABDABAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TVertex, TEdge<span id="ID0EAABDABAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABDABAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary"><p>
            Implementation of a graph G = (V, E) where V denotes the set of
            vertices and E the set of edges between these vertices.
            </p><p>
            The edges E of the graph are stored as adjacency list, making this
            implementation fast at enumerating vertex neighbors, but slow at
            accessing specific edges for dense graphs (which have many edges
            between each pair of vertices).
            </p><p>
            This implementation can be used for representing either directed or
            undirected graphs (calling <a href="M_Npruehs_GrabBag_Graphs_Graph_2_AddEdge.htm" target="">AddEdge(TVertex, TVertex)</a> and
            <a href="M_Npruehs_GrabBag_Graphs_Graph_2_AddDirectedEdge.htm" target="">AddDirectedEdge(TVertex, TVertex)</a>, respectively).
            </p><p>
            The weight of the edges between vertices depends on the specified edge
            type. Calling <a href="M_Npruehs_GrabBag_Graphs_Graph_2_AddEdge.htm" target="">AddEdge(TVertex, TVertex)</a> without specifying
            an edge creates a default edge between both vertices, usually resulting
            in an unweighted graph.
            </p><p>
            This implementation allows adding multiple edges between two vertices,
            thus being feasible for modeling multi-graphs. Also, it allows creating
            loops, edges whose source and target vertex are identical.
            </p></div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Npruehs_GrabBag_Graphs_GraphF.htm" target="">GraphF</a></td><td><div class="summary"><p>
            Implementation of a graph G = (V, E) where V denotes the set of
            vertices and E the set of edges with real edge weights between these vertices.
            </p><p>
            The edges E of the graph are stored as adjacency list, making this
            implementation fast at enumerating vertex neighbors, but slow at
            accessing specific edges for dense graphs (which have many edges
            between each pair of vertices).
            </p><p>
            This implementation can be used for representing either directed or
            undirected graphs (calling <a href="M_Npruehs_GrabBag_Graphs_GraphF_AddEdge.htm" target="">AddEdge(Int32, Int32)</a> and
            <a href="M_Npruehs_GrabBag_Graphs_GraphF_AddDirectedEdge.htm" target="">AddDirectedEdge(Int32, Int32)</a>, respectively).
            </p><p>
            This implementation allows adding multiple edges between two vertices,
            thus being feasible for modeling multi-graphs. Also, it allows creating
            loops, edges whose source and target vertex are identical.
            </p></div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Npruehs_GrabBag_Graphs_GraphI.htm" target="">GraphI</a></td><td><div class="summary"><p>
            Implementation of a graph G = (V, E) where V denotes the set of
            vertices and E the set of edges with integer edge weights between these vertices.
            </p><p>
            The edges E of the graph are stored as adjacency list, making this
            implementation fast at enumerating vertex neighbors, but slow at
            accessing specific edges for dense graphs (which have many edges
            between each pair of vertices).
            </p><p>
            This implementation can be used for representing either directed or
            undirected graphs (calling <a href="M_Npruehs_GrabBag_Graphs_GraphI_AddEdge.htm" target="">AddEdge(Int32, Int32)</a> and
            <a href="M_Npruehs_GrabBag_Graphs_GraphI_AddDirectedEdge.htm" target="">AddDirectedEdge(Int32, Int32)</a>, respectively).
            </p><p>
            This implementation allows adding multiple edges between two vertices,
            thus being feasible for modeling multi-graphs. Also, it allows creating
            loops, edges whose source and target vertex are identical.
            </p></div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Npruehs_GrabBag_Graphs_IntVertex.htm" target="">IntVertex</a></td><td><div class="summary"><span class="nolink">Int32</span> wrapper that implements the graph vertex
            interface.
            </div></td></tr></table><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Interfaces</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Interface</th><th class="ps_descriptionColumn">Description</th></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_Npruehs_GrabBag_Graphs_IGraph_1.htm" target="">IGraph<span id="ID0ECABCAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABCAAAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TVertex<span id="ID0EAABCAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABCAAAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary"><p>
            Unweighted graph G = (V, E) where V denotes the set of
            vertices and E the set of edges between these vertices.
            </p><p>
            Implementing classes can be used for representing either directed or
            undirected graphs (calling <a href="M_Npruehs_GrabBag_Graphs_IGraph_1_AddEdge.htm" target="">AddEdge(TVertex, TVertex)</a> and
            <a href="M_Npruehs_GrabBag_Graphs_IGraph_1_AddDirectedEdge.htm" target="">AddDirectedEdge(TVertex, TVertex)</a>, respectively).
            </p><p>
            Whether multi-graphs and loops are supported depends on the actual
            implementation.
            </p></div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_Npruehs_GrabBag_Graphs_IVertex.htm" target="">IVertex</a></td><td><div class="summary">
            Interface for graph vertices.
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_Npruehs_GrabBag_Graphs_IWeightedGraph_2.htm" target="">IWeightedGraph<span id="ID0ECABAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABAAAAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TVertex, TEdge<span id="ID0EAABAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABAAAAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary"><p>
            Weighted graph G = (V, E) where V denotes the set of
            vertices and E the set of edges between these vertices.
            </p><p>
            Implementing classes can be used for representing either directed or
            undirected graphs (calling <a href="M_Npruehs_GrabBag_Graphs_IWeightedGraph_2_AddEdge.htm" target="">AddEdge(TVertex, TVertex, TEdge)</a> and
            <a href="M_Npruehs_GrabBag_Graphs_IWeightedGraph_2_AddDirectedEdge.htm" target="">AddDirectedEdge(TVertex, TVertex, TEdge)</a>, respectively).
            </p><p>
            Whether multi-graphs and loops are supported depends on the actual
            implementation.
            </p></div></td></tr></table></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><div class="OH_feedbacklink"><a href="mailto:dev@npruehs.de?subject=Nick%27s+Grab+Bag+of+Useful+Stuff+2.0+-+Documentation+Npruehs.GrabBag.Graphs+Namespace+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to dev@npruehs.de.</div></div></body></html>